railsフレーム再構築

heroku再構築しても変わらなかったので原因はこちらです！
SystemZ作ります

・同じ仮想マシン上に構築
・rubyやgemのバージョン管理は特になし
> ruby --version
ruby 2.4.1
> rails --version
Rails 5.1.3
> gem list
actioncable (5.1.3) actionmailer (5.1.3) actionpack (5.1.3)
actionview (5.1.3) activejob (5.1.3) activemodel (5.1.3)
activerecord (5.1.3) activesupport (5.1.3) addressable (2.5.2)
arel (8.0.0) autoprefixer-rails (7.1.6) bcrypt (3.1.11)
bigdecimal (default: 1.3.0) bindex (0.5.0) bootstrap-sass (3.3.7)
builder (3.2.3) bundler (1.15.4) byebug (9.1.0) capybara (2.15.1)
chartkick (2.2.4) childprocess (0.7.1) coffee-rails (4.2.2) 
coffee-script (2.4.1) coffee-script-source (1.12.2)
concurrent-ruby (1.0.5) devise (4.3.0) did_you_mean (1.1.0)
erubi (1.6.1) execjs (2.7.0) ffi (1.9.18) globalid (0.4.0)
i18n (0.8.6) io-console (default: 0.4.6) jbuilder (2.7.0)
jquery-rails (4.3.1) json (default: 2.0.2)
libv8 (3.16.14.19 x86_64-linux) listen (3.1.5) loofah (2.0.3)
mail (2.6.6) method_source (0.8.2) mime-types (3.1)
mime-types-data (3.2016.0521) mini_mime (0.1.4)
mini_portile2 (2.2.0) minitest (5.10.3, 5.10.1) multi_json (1.12.2)
mysql2 (0.4.9) net-telnet (0.1.1) nio4r (2.1.0) nokogiri (1.8.0)
openssl (default: 2.0.3) orm_adapter (0.5.0) pg (0.21.0)
power_assert (0.4.1) psych (default: 2.2.2) public_suffix (3.0.0)
puma (3.10.0) rack (2.0.3) rack-test (0.6.3) rails (5.1.3)
rails-dom-testing (2.0.3) rails-html-sanitizer (1.0.3)
railties (5.1.3) rake (12.0.0) rb-fsevent (0.10.2)
rb-inotify (0.9.10) rdoc (default: 5.0.0) ref (2.0.0)
responders (2.4.0) roo (2.7.1) roo-xls (1.1.0) ruby-ole (1.2.12.1)
ruby_dep (1.5.0) rubyzip (1.2.1) sass (3.5.1) sass-listen (4.0.0)
sass-rails (5.0.6) selenium-webdriver (3.5.2, 3.5.1)
spreadsheet (1.1.4) spring (2.0.2) spring-watcher-listen (2.0.1)
sprockets (3.7.1) sprockets-rails (3.2.1) test-unit (3.2.3)
therubyracer (0.12.3) thor (0.20.0) thread_safe (0.3.6)
tilt (2.0.8) turbolinks (5.0.1) turbolinks-source (5.0.3)
tzinfo (1.2.3) uglifier (3.2.0) warden (1.2.7)
web-console (3.5.1) websocket-driver (0.6.5)
websocket-extensions (0.1.2) xmlrpc (0.2.1) xpath (2.1.0)



さてさて

1.railsフレームの作成
> rails new SystemZ --skip-bundle -d mysql
//bundleはrails個別のgemを一括管理するもの
//この時点で一通りフレームが作成され，gitまで入っているのですね．．．

2.railsのgemを入れる
・まずGemfileから下の行のコメントを外す
gem 'therubyracer', platforms: :ruby
//js用のエンジンをrubyから使えるようにするgemらしく，コンパイル時とかに必要なんだとさ
>bundle install
//これでGemfile中のgemが全て入ります

3.データベース接続情報を与える
・config/database.yml中の，default部分のusername,passwordをdbのそれと一致させる
・さらにdevelopment,test,production用のDB名をそれぞれSystemXのそれに直す
//DBサーバはSystemXと共有なので，とりあえずDBもSystemXのものを使う

4.ブラウザからアクセスしてみる
→とりあえず成功！！

5.herokuにあげる前段階として，トップページを作成する（このままアップしてもページがないって言われる）
>rails g controller users
//→コントローラー，ヘルパー，jsやscssが作成される
・users_controller.rbにindex関数を定義
・viewのusers直下にindex.html.erb作成
・config/routes.rbにgetとroot toを定義(受け取ってよいURIを定義/URIとコントローラを対応させる)

6.これをherokuにあげてみる
//re_heroku.txtを参考に,systemz-pred作成
user:ba94c84892d89c
pass:670196d6
server:us-cdbr-iron-east-05.cleardb.net
db:heroku_8371934ade8df10
→とりあえず成功！！

7.DBに情報入れてみる
> rails g model Amount
//modelとmigrationファイルが作成される
・migrationファイル編集（SystemXから移植）
・seeds.rbの移植
→再びpush
> heroku run rails db:migrate --app systemz-pred
> heroku run rails db:seed --app systemz-pred
→workbench見たところ成功！！
//dyno起動してもデータ増えない．

8.index画面のview関連を移植
・Gemfileに追加gemを記述(rooとか)
> bundle install
・stylesheetsを移植
・app/views/layouts/application.html.erbにヘッダーとjsインクルード(chartkick用)の設定

9.devise(認証用gem)入れる
//すでにgemは入っている(8のbundle install)
> rails g devise:install
> rails g devise:views
> rails g devise User
//ビュー，モデル，migrationファイル生成
・migrationファイルを移植（usernameのカラムをつける）
> rails db:migrate
・user.rbを移植(認証キーをemailからnameに変更)
・application_controller.rbを移植
//before_actionを定義してアクセス時にまず認証に飛ぶようにする
//ストロングパラメータの定義
・deviseのviewを移植　//sign_in用のsessions.new，sign_up用のregistrations/new
・routes.rbに以下を記述
devise_for :users
//devise関連のuriにルートを通す

10.再デプロイ
・デプロイ後migrate(users)
→よっしゃ成功！！DBも増加なし！！

11.コントローラを作成
・users_controller移植
・routes.rbにpost時のルートも作成
→エクセル入力時以外の処理は完成！！

12.pythonを入れる
・assets/pythonディレクトリを丸ごと移植
・requirements.txt移植
・Procfile移植
> heroku buildpacks:add heroku/python --app systemz-pred
→デプロイ後アクセスしたらDBが倍になった！！！！犯人はここだ！！！！

13.犯人炙り出し
> heroku run pip freeze --app systemz-pred
backports.weakref, bleach, Markdown, mysql-connector-python,
numpy, protobuf, scikit-learn, scipy, six, tensorflow, Werkzeug
①mysql-connector-pythonのアンインストール
②Procfileを削除
③requirements.txtからmysql-connector-python,setuptoolsを削除
→H14 "no web process is running"
②を元に戻す．
→動いた！しかしこれでも増えてしまう！

14.python環境全消し
②ふたたび
④pythonディレクトリを消す
⑤requirements.txtを削除
⑥buildpacksからheroku/pythonを消す
⑦pythonライブラリ全消し
→herokuに繋ぎなおしたらpipすら消えてた
→デプロイ，DB増えない！！！

15.順に環境増やす
②Procfile →　OK
⑥buildpacks → OK
⑤/⑦requirements.txt(setuptools,mysql以外)　→　OK
//pip freezeしたらちゃんと入りました
③-1 setuptools → OK
③-2/① mysql-connector-python →　OK
④-1 pythonディレクトリ(pycファイルは削除，config.pyはコメントアウト) →　OK
④-2 config.pyのコメントアウト外す → 増えない！しかしエクセル入力時に「Segmentation False」エラーが...


